#!/bin/bash

source ./utils
source ./tf2ConfigFileParser

rm -rf /tmp/PikaDJ/ >/dev/null 2>/dev/null
mkdir /tmp/PikaDJ >/dev/null 2>/dev/null

mkdir ~/Music/youtubeRequests >/dev/null 2>/dev/null
mkdir ~/Music/youtubeRequests/fixedName >/dev/null 2>/dev/null

rm ../voice_input.wav >/dev/null 2>/dev/null
rm -f ~/Music/youtubeRequests/fixedName/* >/dev/null 2>/dev/null

> /tmp/PikaDJ/queue.tmp

init() {
	echo "Initilizing..."
	source ./tf2ConfigFileParser
	echo "alias micspamEnable \"volume 0.30; voice_loopback 1; +voicerecord; alias micspamToggle micspamDisable\"" >> stdin
	echo "alias micspamDisable \"volume 0.30; -voicerecord; voice_loopback 0; alias micspamToggle micspamEnable\"" >> stdin
	echo "alias micspamToggle micspamEnable" >> stdin
	(sleep 0.25; while true; do > ../"$modName"/console.log; echo "sv_use_steam_voice" >> stdin; sleep 1; done) & >/dev/null 2>/dev/null
	pidToKill=$!
	while read line; do if [[ $line =~ ^\"sv_use_steam_voice\"\ =\ \".\" ]]; then shouldLoopback=$(echo "$line" | sed -e 's/^"sv_use_steam_voice" = "\(.\)".*/\1/'); break; fi; done < <(tail -f -n0 ../"$modName"/console.log)
	kill -9 $pidToKill >/dev/null 2>/dev/null
	wait $pidToKill >/dev/null 2>/dev/null
	echo "shouldLoopback: $shouldLoopback"

	if [[ $shouldLoopback == "0" ]]; then
		echo "voice_inputfromfile 1; micspamDisable" >> stdin
		sleep 0.05
		echo "voice_inputfromfile 1; micspamDisable" >> stdin
	else
		echo "voice_inputfromfile 0; micspamDisable" >> stdin
		sleep 0.05
		echo "voice_inputfromfile 0; micspamDisable" >> stdin
	fi
	
	> /tmp/PikaDJ/voteSkip.tmp
	> /tmp/PikaDJ/resourceIDs.tmp
	
	if [[ $shouldLoopback != "0" ]]; then
		nullSink=$(pactl load-module module-null-sink sink_name="null_TF2Micspam" sink_properties=device.description="TF2_Micspam_Null_Sink")
		setResourceLine n "$nullSink"
	fi
	if $autoplay; then
		playSong &
	fi
	#echo "Scheduled commands PID: $ScheduledCommands_PID"
}

cleanup() {
	echo "Cleaning up..."
	echo "micspamDisable" >> stdin
	stopSong >/dev/null 2>/dev/null
	pactl unload-module "$(getResourceLine n)" >/dev/null 2>/dev/null
}

cleanupExit() {
	echo "Cleaning up..."
	echo "micspamDisable" >> stdin
	stopSong >/dev/null 2>/dev/null
	pactl unload-module "$(getResourceLine n)" >/dev/null 2>/dev/null
	rm -f ~/Music/youtubeRequests/fixedName/* >/dev/null 2>/dev/null
	rm -rf /tmp/PikaDJ/ >/dev/null 2>/dev/null
}

trap 'cleanupExit' EXIT
init

#ttsVoice="default"

tail -f ../"$modName"/console.log -n1 | while read line ; do
tUser=$(echo "$line" | sed -e 's/^\*SPEC\* //' -e 's/^\*DEAD\* //' -e 's/^(TEAM) //' -e 's/^\*DEAD\*(TEAM) //' -e 's/\(.*\): .*/\1/')
tUserEscaped=$(echo "$tUser" | sed -e 's/\"/\\\"/g')
#ranCmd=$(echo "$line" | sed -e 's/.* :  !pika\(.*\)/\1/' -e 's/\"/\\\"/g')
ranCmd=$(echo "$line" | sed -e 's/.*: '"$commandPrefix"'\(.*\)/\1/I')
ranCmdEscaped=$(echo "$ranCmd" | sed -e 's/\"/\\\"/g')
ranCmdFull=$(echo "$line" | sed -e 's/.*: \(.*\)/\1/')
ranCmdLower=$(echo "$ranCmd" | tr '[:upper:]' '[:lower:]')
if $ttsEnabled && [[ "$ranCmdFull" != "$line" ]]; then
	ranCmdFull=$(echo "$ranCmdFull" | tr -cd '[:print:]')
	#if [[ $ranCmdFull =~ ^!voice\ .* ]]; then ttsVoice=$(echo "$ranCmdFull" | sed -e 's/^!voice //I'); ranCmdFull="Now using voice: $ttsVoice"; fi
	echo "$tUser said: $ranCmdFull"
	if $ttsShrek; then ttsVoice="en-scottish"; else ttsVoice="default"; fi
	if $ttsVagineer; then
		echo "$ranCmdFull" | rev | espeak -s 200 -v "$ttsVoice" --stdout | sox - -e signed-integer -b 16 --endian little -c 1 -r 11025 ../voice_input.wav reverse trim 0 3 pad 0.5 0 silence 1 0.1 0.01% >/dev/null 2>/dev/null
	else
		echo "$ranCmdFull" | espeak -s 200 -v "$ttsVoice" --stdout | sox - -e signed-integer -b 16 --endian little -c 1 -r 11025 ../voice_input.wav trim 0 3 pad 0.5 0 silence 1 0.1 0.01% >/dev/null 2>/dev/null
	fi
	length=$(avprobe ../voice_input.wav 2>&1 | sed -n -e 's/^ *Duration: \([0-9:.]*\).*/\1/p')
	lengthWhole=$(echo "$length" | sed -e 's/\.[0-9]\{2\}$//')
	lengthMS=$(echo "$length" | sed -e 's/^.*\(\.[0-9]\{2\}\)$/\1/')
	echo "micspamEnable" >> stdin
	if [[ $shouldLoopback != "0" ]]; then
		avplay -i ../voice_input.wav -nodisp >/dev/null 2>/dev/null &
		avplayProcId=$!
		setResourceLine a "$avplayProcId"
		echo "micspamEnable" >> stdin
		appIndex=0
		while [[ $appIndex != "null" ]]; do
			while read line; do
				case $line in
					index:\ *) appIndex=$(echo "$line" | sed -e 's/.*index: \(.*\)/\1/') ;;
					application.name\ =\ *) if [[ $(echo "$line" | sed -e 's/.*application\.name = \"\(.*\)\"/\1/') == "Steam" ]]; then echo "Found it at $appIndex"; pacmd move-source-output $appIndex "null_TF2Micspam.monitor"; appIndex="null"; break; fi ;;
				esac
			done < <(pacmd list-source-outputs) >/dev/null 2>/dev/null
		done
		appIndex=0
		while [[ $appIndex != "null" ]]; do
			while read line; do
				case $line in
					index:\ *) appIndex=$(echo "$line" | sed -e 's/.*index: \(.*\)/\1/') ;;
					application.process.id\ =\ *) if [[ $(echo "$line" | sed -e 's/.*application\.process\.id = \"\(.*\)\"/\1/') == "$avplayProcId" ]]; then echo "Found it at $appIndex"; pacmd move-sink-input $appIndex "null_TF2Micspam"; appIndex="null"; break; fi ;;
				esac
			done < <(pacmd list-sink-inputs) >/dev/null 2>/dev/null
		done
	fi
	sleep $(to_seconds "$lengthWhole")$lengthMS
	kill -9 $avplayProcId >/dev/null 2>/dev/null
	wait $avplayProcId >/dev/null 2>/dev/null
	if [[ $shouldLoopback != "0" ]]; then
		echo "micspamEnable" >> stdin
		appIndex=0
		while [[ $appIndex != "null" ]]; do
			while read sourceLine; do
				case $sourceLine in
					index:\ *) appIndex=$(echo "$sourceLine" | sed -e 's/.*index: \(.*\)/\1/') ;;
					application.name\ =\ *) if [[ $(echo "$sourceLine" | sed -e 's/.*application\.name = \"\(.*\)\"/\1/') == "Steam" ]]; then echo "Found it at $appIndex"; pacmd move-source-output $appIndex $(pacmd list-sources | grep -i \* | sed -e 's/.*index: \(.*\)/\1/'); appIndex="null"; break; fi ;;
				esac
			done < <(pacmd list-source-outputs) >/dev/null 2>/dev/null
		done
	fi
	echo "micspamDisable" >> stdin
elif [[ $ranCmd != $line ]]
then
case $ranCmdLower in
	skip)
		echo "[$tUser] Voted to skip Song!"
		if [[ $(getSongInfo) == "" ]]; then
			echo "say [PikaDJ] No song is playing!" >> stdin
			continue
		else
			voteCount=$(wc -l /tmp/PikaDJ/voteSkip.tmp | cut -f1 -d' ')
			if (( voteCount == 0 )); then
				source ./tf2ConfigFileParser
				serverPlayers=$(getPlayerCount)
			fi
		fi
		if ! grep -Fxq -- "$tUser" /tmp/PikaDJ/serverPlayers.tmp; then
			echo "say [PikaDJ] You were not on the server before the first vote, so your vote will not be counted! Sorry!" >> stdin
			continue
		elif ! grep -Fxq -- "$tUser" /tmp/PikaDJ/voteSkip.tmp; then
			(( requiredPercentage > 100 )) && requiredPercentage=100; (( requiredPercentage < 1 )) && requiredPercentage=1
			echo "$tUser" >> /tmp/PikaDJ/voteSkip.tmp
			((voteCount++))
			if (( serverPlayers*requiredPercentage/100 < voteCount+1 )); then
				echo "say [PikaDJ] Skipped Song!" >> stdin
				skipSong
			else
				if ((serverPlayers*requiredPercentage/100-voteCount == 1)); then voteString="vote is"; else voteString="votes are"; fi
				echo "say \"[PikaDJ] $((serverPlayers*requiredPercentage/100-voteCount)) more $voteString required to skip this song!\"" >> stdin
			fi
		else
			echo "say \"[PikaDJ] You have already voted $tUserEscaped!\"" >> stdin
		fi
		;;
	play)
		#echo "[$tUser] Playing!"
		#echo "say [PikaDJ] Playing!" >> stdin
		#if [ "$shouldLoopback" != "0" ]; then
			#pacmd set-default-sink $nullSink
			#avplay -i
		#fi
		;;
	stop)
		#if [ "$shouldLoopback" == "0" ]; then
			#echo "micspamDisable" >> stdin
		#fi
		#echo "[$tUser] Stopped!"
		#echo "say [PikaDJ] Stopped!" >> stdin
		;;
	help)
		#echo "[$tUser] Sent help!"
	#echo "say [PikaDJ] Commands: !pikaplay - start playing, !pikastop - stop music..." >> stdin
		#sleep 1.2
		#echo "say [PikaDJ] Commands: !pikaskip - skip song, !pikainfo/!pikasong - get the currently playing song" >> stdin
		;;
	info|song)
		echo "[$tUser] Sent song info!"
		saySongInfo
		;;
	boom)
		if $funEnabled; then
			echo "[$tUser] Blew me up!"
			echo "say \"Initiating self destruct sequence...\"; explode" >> stdin
		fi
		;;
	say\ *)
		if $funEnabled; then
			phrase=$(echo "$ranCmdEscaped" | sed -e 's/say \([^ ].*\)/\1/I')
			if [[ $phrase != $ranCmdEscaped ]]; then
				if [[ $phrase == \!* || $phrase == /* ]]; then
					echo "[$tUser] tried to make me say $phrase!"
					echo "say \"Sorry $tUserEscaped, but I will not run commands!\"" >> stdin
				else
					echo "[$tUser] made me say $phrase!"
					echo "say \"$phrase\"" >> stdin
				fi
			fi
		fi
		;;
	yt\ *)
		if true; then
			echo "[$tUser] requested a youtube video!"
			#echo "say \"[PikaDJ] Getting video info...\"" >> stdin
			videoUrl=$(echo "$ranCmd" | sed -e 's/yt \([^ ].*\)/\1/I')
			./tf2YoutubeDownloader "$videoUrl" "$tUserEscaped" "$shouldLoopback" &
		fi
		;;
	yts\ *)
		if true; then
			echo "[$tUser] requested a youtube video!"
			query=$(urlencode "$(echo $ranCmd | sed -e 's/yts \([^ ].*\)/\1/I')")
			echo "$query"
			videoUrl=$(curl "https://gdata.youtube.com/feeds/api/videos?q=$query&max-results=1&alt=json&v=2" 2>/dev/null | sed -e 's/.*"href":"\(https:\/\/www\.youtube\.com\/watch?v=[^"]*\)".*/\1/')
			echo "$videoUrl"
			./tf2YoutubeDownloader "$videoUrl" "$tUserEscaped" "$shouldLoopback" &
		fi
		;;
	*)
		;;
		#echo "[$tUser] I'm sorry $tUser, but $ranCmdFull is not a programmed command."
		#echo "say [PikaDJ] I'm sorry $tUserEscaped, but $ranCmdFullEscaped is not a programmed command." >> stdin
esac
else
	case $line in
		sendSongInfo)
			echo "Sent song info due to bind!"
			saySongInfo
			;;
		sendHelp)
			echo "Sent help due to bind!"
			echo "say [PikaDJ] Commands: ""$commandPrefix""yts song name - Request song from youtube, ""$commandPrefix""yt youtubeURL - request song by URL..." >> stdin
			sleep 1.2
			echo "say [PikaDJ] Commands: ""$commandPrefix""skip - initiate a vote to skip song, ""$commandPrefix""info/""$commandPrefix""song - get the currently playing song." >> stdin
			;;
		resetMic)
			if [[ $shouldLoopback == "0" ]]; then
				echo "Could not reset mic source due to server mode!"
			else
				echo "Reset mic source due to bind!"
				echo "micspamEnable" >> stdin
				appIndex=0
				while [[ $appIndex != "null" ]]; do
					while read sourceLine; do
						case $sourceLine in
							index:\ *) appIndex=$(echo "$sourceLine" | sed -e 's/.*index: \(.*\)/\1/') ;;
							application.name\ =\ *) if [[ $(echo "$sourceLine" | sed -e 's/.*application\.name = \"\(.*\)\"/\1/') == "Steam" ]]; then echo "Found it at $appIndex"; pacmd move-source-output $appIndex $(pacmd list-sources | grep -i \* | sed -e 's/.*index: \(.*\)/\1/'); appIndex="null"; break; fi ;;
						esac
					done < <(pacmd list-source-outputs) >/dev/null 2>/dev/null
				done
				echo "micspamDisable" >> stdin
			fi
			;;
		The\ server\ is\ using\ sv_pure\ *)
			echo "Re-initializing..."
			cleanup
			init
			;;
		playMusic)
			echo "Resumed playing due to bind!"
			playSong &
			;;
		stopMusic)
			echo "Stopped playing due to bind!"
			stopSong
			;;
		skipMusic)
			echo "Skipped song due to bind!"
			echo "say [PikaDJ] Skipped Song!" >> stdin
			skipSong
			;;
		clearMusic)
			echo "Cleared playlist due to bind!"
			echo "say [PikaDJ] Cleared playlist!" >> stdin
			clearQueue
			rm -f ~/Music/youtubeRequests/fixedName/* >/dev/null 2>/dev/null
			;;
		*)
			;;
	esac
fi
done
